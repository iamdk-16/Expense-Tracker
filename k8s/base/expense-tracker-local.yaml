# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: expense-tracker
---
# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: expense-tracker
type: Opaque
data:
  # Replace with your actual base64 encoded values
  mongo-uri: bW9uZ29kYitzcnY6Ly9leHBlbnNlVXNlcjpZT1VSX1BBU1NXT1JEQGV4cGVuc2UtdHJhY2tlci1jbHVzdGVyLm1za21tMGkubW9uZ29kYi5uZXQvZXhwZW5zZS10cmFja2VyP3JldHJ5V3JpdGVzPXRydWUmdz1tYWpvcml0eSZhcHBOYW1lPWV4cGVuc2UtdHJhY2tlci1jbHVzdGVy
  jwt-secret: ZXhwZW5zZV90cmFja2VyX3N1cGVyX3NlY3JldF9qd3Rfa2V5XzIwMjU=
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secrets
  namespace: expense-tracker
type: Opaque
data:
  admin-password: YWRtaW4xMjM= # admin123 in base64
---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: expense-tracker-backend
  namespace: expense-tracker
  labels:
    app: expense-tracker-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: expense-tracker-backend
  template:
    metadata:
      labels:
        app: expense-tracker-backend
    spec:
      containers:
      - name: backend
        image: thedk/expense-tracker-backend:latest
        ports:
        - containerPort: 8000
        env:
        - name: PORT
          value: "8000"
        - name: NODE_ENV
          value: "production"
        - name: MONGO_URI
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: mongo-uri
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: expense-tracker-backend-service
  namespace: expense-tracker
spec:
  selector:
    app: expense-tracker-backend
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: expense-tracker-frontend
  namespace: expense-tracker
  labels:
    app: expense-tracker-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: expense-tracker-frontend
  template:
    metadata:
      labels:
        app: expense-tracker-frontend
    spec:
      containers:
      - name: frontend
        image: thedk/expense-tracker-frontend:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: expense-tracker-frontend-service
  namespace: expense-tracker
spec:
  selector:
    app: expense-tracker-frontend
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30080
  type: NodePort
---
# Prometheus ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: expense-tracker
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      - job_name: 'expense-tracker-backend'
        static_configs:
          - targets: ['expense-tracker-backend-service.expense-tracker.svc.cluster.local:8000']
        metrics_path: '/metrics'
        scrape_interval: 10s
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: expense-tracker
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.0
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: expense-tracker
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
    nodePort: 30090
  type: NodePort
---
# Grafana ConfigMaps
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: expense-tracker
data:
  datasource.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service.expense-tracker.svc.cluster.local:9090
        isDefault: true
        editable: true
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: expense-tracker
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.1.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: grafana-storage
        emptyDir: {}
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: expense-tracker
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 30300
  type: NodePort
